/* ------------------------------------------------------------------------- */
//
// Copyright (c) 2010 CubeSoft, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
/* ------------------------------------------------------------------------- */
using System.Linq;
using System.Threading;
using System.Windows.Media;
using Cube.FileSystem;
using Cube.Logging;
using Cube.Mixin.Commands;
using Cube.Tests;
using NUnit.Framework;

namespace Cube.Pdf.Editor.Tests.Presenters
{
    /* --------------------------------------------------------------------- */
    ///
    /// OpenTest
    ///
    /// <summary>
    /// Tests Open commands of the MainViewModel class.
    /// </summary>
    ///
    /* --------------------------------------------------------------------- */
    [TestFixture]
    class OpenTest : VmFixture
    {
        #region Tests

        /* ----------------------------------------------------------------- */
        ///
        /// Open
        ///
        /// <summary>
        /// Tests the Open and Redraw commands.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [TestCase("Sample.pdf",       ""        )]
        [TestCase("SampleAes128.pdf", "password")]
        public void Open(string filename, string password)
        {
            var vp = new VmParam
            {
                Source = GetSource(filename),
                Password = password,
            };

            using var vm = NewVM();
            using var d0 = vm.Hook(vp);

            vm.Test(vm.Ribbon.Open);
            vm.Test(vm.Ribbon.Redraw);

            var dest = vm.Value.Images.First();
            var cmp  = vm.Value.Images.Preferences.Dummy;

            Assert.That(Wait.For(() => dest.Image != cmp), "Timeout");
            Assert.That(dest.Stretch, Is.EqualTo(Stretch.UniformToFill));
        }

        /* ----------------------------------------------------------------- */
        ///
        /// Open_BadFormat
        ///
        /// <summary>
        /// Tests the open method with a bad format file.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [Test]
        public void Open_BadFormat()
        {
            var cts = new CancellationTokenSource();
            using var vm = NewVM();
            using (vm.Hook(new() { Source = GetSource("Sample.txt")}))
            using (vm.Subscribe<DialogMessage>(e => cts.Cancel()))
            {
                vm.Ribbon.Open.Command.Execute();
                Assert.That(Wait.For(cts.Token), "Timeout");
                Assert.That(vm.Value.Source, Is.Null);
            }
        }

        /* ----------------------------------------------------------------- */
        ///
        /// OpenLink
        ///
        /// <summary>
        /// Tests the OpenLink command.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [Test]
        public void OpenLink()
        {
            Link(Get("Sample.pdf"), GetSource("Sample.pdf"));

            using var vm = NewVM();
            var src = Io.Get(Get($"Sample.pdf.lnk"));
            Assert.That(src.Exists, Is.True);

            using (vm.Hook())
            {
                vm.Recent.Open.Execute(src);
                Assert.That(Wait.For(() => vm.Value.Count == 2), "Timeout");
            }
        }

        /* ----------------------------------------------------------------- */
        ///
        /// OpenLink_NotFound
        ///
        /// <summary>
        /// Confirms the behavior when the specified link is invalid.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [Test]
        public void OpenLink_NotFound()
        {
            var tmp = Get("Sample.pdf");
            var src = $"{tmp}.lnk";

            Io.Copy(GetSource("Sample.pdf"), tmp, true);
            Link(src, tmp);
            GetType().LogWarn(() => Io.Delete(tmp));
            Assert.That(Io.Exists(src), Is.True,  src);
            Assert.That(Io.Exists(tmp), Is.False, tmp);

            using var vm = NewVM();
            using (vm.Hook())
            {
                vm.Recent.Open.Execute(Io.Get(src));
                Assert.That(Wait.For(() => !Io.Exists(src)), src);
                Assert.That(vm.Value.Source, Is.Null);
            }
        }

        /* ----------------------------------------------------------------- */
        ///
        /// OpenLink_Null
        ///
        /// <summary>
        /// Confirms the behavior when the specified link is null.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        [Test]
        public void OpenLink_Null()
        {
            using var vm = NewVM();
            using (vm.Hook())
            {
                Assert.That(vm.Open, Is.Not.Null);
                Assert.That(vm.Recent.Open, Is.Not.Null);
                vm.Recent.Open.Execute();
                Assert.That(Wait.For(() => !vm.Value.Busy), "Timeout");
                Assert.That(vm.Value.Source, Is.Null);
            }
        }

        #endregion

        #region Others

        /* ----------------------------------------------------------------- */
        ///
        /// Link
        ///
        /// <summary>
        /// Creates a link with the specified path.
        /// </summary>
        ///
        /* ----------------------------------------------------------------- */
        private void Link(string link, string src) => new Shortcut
        {
            FullName     = link,
            Target       = src,
            IconLocation = src,
        }.Create();

        #endregion
    }
}
